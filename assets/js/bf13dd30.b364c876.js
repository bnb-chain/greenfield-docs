"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[6920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,b=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(b,i(i({ref:t},d),{},{components:n})):a.createElement(b,i({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},39012:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={title:"Dataset Batch operations",order:2},i="How does batch object uploading work in Greenfield?",l={unversionedId:"tutorials/app/file-management/batch-upload",id:"tutorials/app/file-management/batch-upload",title:"Dataset Batch operations",description:"In Greenfield, uploading an object to a bucket is a two-stage process. First, a transaction including the object metadata",source:"@site/docs/tutorials/app/file-management/batch-upload.md",sourceDirName:"tutorials/app/file-management",slug:"/tutorials/app/file-management/batch-upload",permalink:"/greenfield-docs/docs/tutorials/app/file-management/batch-upload",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/tutorials/app/file-management/batch-upload.md",tags:[],version:"current",frontMatter:{title:"Dataset Batch operations",order:2},sidebar:"tutorialsSidebar",previous:{title:"Simple Tool for File Management (JS)",permalink:"/greenfield-docs/docs/tutorials/app/file-management/js-file-managemet"},next:{title:"Resumable Upload/Download Demo",permalink:"/greenfield-docs/docs/tutorials/app/file-management/resumable-upload/overview"}},c={},s=[{value:"Ways to Perform Batch Uploading",id:"ways-to-perform-batch-uploading",level:2},{value:"Multi-Message.",id:"multi-message",level:3},{value:"Temporary Account.",id:"temporary-account",level:3},{value:"Bundle Service",id:"bundle-service",level:3},{value:"Temporary Account Showcase",id:"temporary-account-showcase",level:2},{value:"Create a bucket for object storage.",id:"create-a-bucket-for-object-storage",level:3},{value:"Temporary account generation",id:"temporary-account-generation",level:3},{value:"Grant temporary account permissions",id:"grant-temporary-account-permissions",level:3},{value:"Create object meta and put object",id:"create-object-meta-and-put-object",level:3},{value:"Bundle Service Example",id:"bundle-service-example",level:2},{value:"Aggregate various objects as bundle",id:"aggregate-various-objects-as-bundle",level:3},{value:"Extract objects from bundled object",id:"extract-objects-from-bundled-object",level:3}],d={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-does-batch-object-uploading-work-in-greenfield"},"How does batch object uploading work in Greenfield?"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"Greenfield"),", uploading an object to a bucket is a two-stage process. First, a transaction including the object metadata\nneeds to be broadcasted to the Greenfield Chain and confirmed. After confirmation, PUT the object to a Greenfield Storage\nProvider. In the first stage, every transaction needs to be signed by the primary key(also known as ",(0,r.kt)("inlineCode",{parentName:"p"},"account"),", refer to\n",(0,r.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/guide/core-concept/accounts"},"accounts")," for more details). And if you are accessing ",(0,r.kt)("inlineCode",{parentName:"p"},"Greenfield")," via front-end app and connecting\nwallet like Metamask(or other compatible wallets), you will be asked for approval to sign the transaction."),(0,r.kt)("p",null,"For people who may have encountered the need to upload large amounts of objets, while uploading objects to ",(0,r.kt)("inlineCode",{parentName:"p"},"Greenfield")," individually\ncan be a time-consuming and tedious process, because they have to repeatedly approve wallet's pop-up requests to send transactions,\nbatch uploading can be a quick and efficient solution to this problem."),(0,r.kt)("h2",{id:"ways-to-perform-batch-uploading"},"Ways to Perform Batch Uploading"),(0,r.kt)("p",null,"We would introduce two ways to achive the purpose of batch uploading:"),(0,r.kt)("h3",{id:"multi-message"},"Multi-Message."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Greenfield")," supports supports embedding multiple messages in a single transaction. You can create a transaction with\nmultiple ",(0,r.kt)("inlineCode",{parentName:"p"},"MsgCreateObject")," messages and broadcast it to the Greenfield Chain. Once the object metadata is confirmed on-chain,\nyou can start PUTting the objects to the Storage Provider. However, please note that this approach may not be suitable\nfor very large batches due to transaction size limitations in Greenfield."),(0,r.kt)("h3",{id:"temporary-account"},"Temporary Account."),(0,r.kt)("p",null,"Create a temporary account at runtime and grant it full permissions to create objects on behalf of your primary account.\nIn this approach, your primary account only needs to send a transaction to Greenfield to grant permissions to the temporary\naccount. For each object to be uploaded, the temporary account will be used to broadcast the transaction to the Greenfield Chain.\nThere is no further interaction required from the primary account. Please note, the temporary account does not need to be deposited."),(0,r.kt)("h3",{id:"bundle-service"},"Bundle Service"),(0,r.kt)("p",null,"Storing small files in Greenfield is inefficient due to the metadata stored on the blockchain being larger than the files themselves. This leads to higher costs for users. Additionally, Greenfield Blockchain has a capacity limit for processing files simultaneously."),(0,r.kt)("p",null,"To address this issue, we have proposed ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/BEPs/pull/323"},"BEP-323: Bundle Format For Greenfield"),". This repository contains the Golang version of the bundle format, which guides users on aggregating objects into a bundle and parsing a bundled object into separate objects."),(0,r.kt)("h2",{id:"temporary-account-showcase"},"Temporary Account Showcase"),(0,r.kt)("p",null,"To demonstrate the batch uploading process using the Temporary Account approach, an example is provided using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Greenfield-go-sdk"),".\nThe example includes steps to create a bucket for object storage, generate a temporary account, grant permissions to the\ntemporary account, and create and PUT objects."),(0,r.kt)("h3",{id:"create-a-bucket-for-object-storage"},"Create a bucket for object storage."),(0,r.kt)("p",null,"Before we get started, we would need to create a bucket to hold objects using the primary account. This requires broadcasting\na transaction to ",(0,r.kt)("inlineCode",{parentName:"p"},"Greenfield"),". The code below shows how to fill in the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateBucket")," request with the bucket name and\nselected Storage Provider that will serve our bucket, after the transaction is sent, you might want to check the bucket's\nexistence to confirm its creation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'primaryAccount, _ := types.NewAccountFromPrivateKey("primaryAccount", privateKey)\ncli, _ := client.New(chainId, rpcAddr, client.Option{DefaultAccount: primaryAccount})\nctx := context.Background()\n// get storage providers list\nisInService := true\nspLists, _ := cli.ListStorageProviders(ctx, isInService)\n// choose the first sp to be the primary SP, you are free to choose any other one\nprimarySP := spLists[0].GetOperatorAddress()\n// sends a request to Greenfield to create a bucket.\ncli.CreateBucket(ctx, "yourBucketName", primarySP, types.CreateBucketOptions{})\n// wait for confirmation\ntime.Sleep(3 * time.Second)\n// get bucket meta data from Greenfield\nbucketInfo, _ := cli.HeadBucket(ctx, "yourBucketName")\n')),(0,r.kt)("h3",{id:"temporary-account-generation"},"Temporary account generation"),(0,r.kt)("p",null,"Once the bucket is created, we can start generating the temporary account. A private key is 32 bytes represented as a\n64 hexadecimal character string. We can create any random 64 hexadecimal character string to form a private key.\nHowever, in that case, we won't be able to recover it and reuse in the future. So, it is more preferred to use a designed\npayload to generate the private key. In the code snippet below, we concatenate a ",(0,r.kt)("inlineCode",{parentName:"p"},"signPayload"),' by string "payload" and\nthe account sequence, We then use the signature signed by our primary account to form a newly created private key.\nThe ',(0,r.kt)("inlineCode",{parentName:"p"},"signPayload")," acts like a password. No matter what manipulation is applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"signPayload")," to generate the signature,\nas long as we remember the ",(0,r.kt)("inlineCode",{parentName:"p"},"signPayload"),", we can always retrieve the private key by applying the same manipulation again.\nThe example shown here is just one way to get the signature and used for new temporary priavte key, but you are free to\nuse any other algorithm."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// generate the temp account using user\'s primary account signing on payload decided by user, here we add the account nonce to be part of sign payload\nsignPayload := fmt.Sprintf("payload%d", primaryAccount.GetSequence())\ntempAcct, _ := genTemporaryAccount(primaryAccount, signPayload)\ntempAcctAddr, _ := tempAcct.GetAddress().Marshal()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// genTemporaryAccount generates a temporary account, the signPayload is to be signed by user\'s own private key(Primary account),\n// and the signature is used to generate the temporary account\'s private key.\n// User can reconvert account with the signPayload at any time\nfunc genTemporaryAccount(acct *types.Account, signPayload string) (*types.Account, error) {\n    signBz := []byte(signPayload)\n    sig, err := acct.Sign(tmhash.Sum(signBz))\n    if err != nil {\n    return nil, err\n    }\n    if len(sig) < privateKeyLength {\n    return nil, fmt.Errorf("required signature lenght is no less than %d, cur lenght %d", privateKeyLength, len(sig))\n    }\n    return types.NewAccountFromPrivateKey("temp", hex.EncodeToString(sig[:privateKeyLength]))\n}\n')),(0,r.kt)("h3",{id:"grant-temporary-account-permissions"},"Grant temporary account permissions"),(0,r.kt)("p",null,"To entitle the temporary account to create objects on behalf of the primary account, two types of permissions are\nrequired. Both need to be granted by the primary account:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Grant the creating object permission in the bucket. ",(0,r.kt)("inlineCode",{parentName:"li"},"Policy")," defines that the operation that can be enforced on a resource by an account or a group. Refer to ",(0,r.kt)("a",{parentName:"li",href:"/greenfield-docs/docs/guide/greenfield-blockchain/modules/permission"},"permission")," to get more details"),(0,r.kt)("li",{parentName:"ul"},"Grant an allowance so that the gas fee will be deducted from the primary account, and the primary account will be the owner of objects. ")),(0,r.kt)("p",null,"Again, we would need to broadcast transaction including these two types of granting messages to ",(0,r.kt)("inlineCode",{parentName:"p"},"Greenfield")," using the primary account. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Grant the temporary account creating objects permission in the primary account\'s bucket\nstatement := &permTypes.Statement{\n    Actions: []permTypes.ActionType{permTypes.ACTION_CREATE_OBJECT},\n    Effect:  permTypes.EFFECT_ALLOW,\n}\nmsgPutPolicy := storageTypes.NewMsgPutPolicy(primaryAccount.GetAddress(), gnfdTypes.NewBucketGRN("yourBucketName").String(), \n    permTypes.NewPrincipalWithAccount(tempAcct.GetAddress()), []*permTypes.Statement{statement}, nil)\n\n// Grant allowance to the temporary account to broadcast the expected transaction type\nallowedMsg := make([]string, 0)\nallowedMsg = append(allowedMsg, "/greenfield.storage.MsgCreateObject")\nallowance, _ := feegrant.NewAllowedMsgAllowance(&feegrant.BasicAllowance{}, allowedMsg)\nmsgGrantAllowance, _ := feegrant.NewMsgGrantAllowance(allowance, primaryAccount.GetAddress(), tempAcct.GetAddress())\n\n// Broadcast the transaction to Greenfield\ncli.BroadcastTx(ctx, []sdk.Msg{msgGrantAllowance, msgPutPolicy}, types.TxOption{})\n\n// Wait for a block and confirm that permissions are granted\n')),(0,r.kt)("h3",{id:"create-object-meta-and-put-object"},"Create object meta and put object"),(0,r.kt)("p",null,"Finally, you can create the object metadata and put the object using the temporary account:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Switch to use the temporary account\ncli.SetDefaultAccount(tempAcct)\n// Define the primary account as the granter\ntxOpt := types.TxOption{FeeGranter: primaryAccount.GetAddress()}\n// create object content\nvar buffer bytes.Buffer\nline := `0123456789`\nfor i := 0; i < 100; i++ {\n    buffer.WriteString(fmt.Sprintf("%s", line))\n}\n// Create the object meta on Greenfield Chain\ncli.CreateObject(ctx, "yourBucketName", "yourObjectName", bytes.NewReader(buffer.Bytes()), types.CreateObjectOptions{TxOpts: &txOpt})\n// Wait for a block, once the meta is created on the chain, upload the object to the Greenfield Storage Provider\ntime.Sleep(3 * time.Second)\n// Upload the object to Greenfield Storage Provider\ncli.PutObject(ctx, "yourBucketName", "yourObjectName", int64(buffer.Len()), bytes.NewReader(buffer.Bytes()), types.PutObjectOptions{})\n')),(0,r.kt)("h2",{id:"bundle-service-example"},"Bundle Service Example"),(0,r.kt)("p",null,"Here is the guide for how to aggregate batch objects as a bundle, and how to parse a bundled object. As for how to interact with Greenfield, you should refer to \u3010Greenfield GO SDK](",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/greenfield-go-sdk"},"https://github.com/bnb-chain/greenfield-go-sdk"),")."),(0,r.kt)("h3",{id:"aggregate-various-objects-as-bundle"},"Aggregate various objects as bundle"),(0,r.kt)("p",null,"Follow the steps below to aggregate multiple objects into a single bundle."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"NewBundle "),"function to create an empty bundle.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Assemble above two objects into a bundle object\n    bundle, err := bundle.NewBundle()\n    handleErr(err, "NewBundle")\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Use the bundle's ",(0,r.kt)("inlineCode",{parentName:"li"},"AppendObject")," method to add objects to the bundle individually.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    _, err = bundle.AppendObject("object1", bytes.NewReader(buffer1.Bytes()), nil)\n    handleErr(err, "AppendObject")\n    _, err = bundle.AppendObject("object2", bytes.NewReader(buffer2.Bytes()), nil)\n    handleErr(err, "AppendObject")\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Use the bundle's ",(0,r.kt)("inlineCode",{parentName:"li"},"FinalizeBundle")," method to seal the bundle, preventing any further objects from being added.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    bundledObject, totalSize, err := bundle.FinalizeBundle()\n    handleErr(err, "FinalizeBundle")\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"To release resources after use, utilize the Close method of the bundle.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"}," defer bundle.Close()\n")),(0,r.kt)("p",null,"Full example ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/greenfield-bundle-sdk/blob/master/examples/upload_bundle.go"},"here")),(0,r.kt)("h3",{id:"extract-objects-from-bundled-object"},"Extract objects from bundled object"),(0,r.kt)("p",null,"Follow the steps below to extract various objects from a bundle."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open the bundled object as a bundle instance using ",(0,r.kt)("inlineCode",{parentName:"li"},"NewBundleFromFile"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Extract objects from bundled object\n    bundle, err := bundle.NewBundleFromFile(bundleFile.Name())\n    handleErr(err, "NewBundleFromFile")\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Retrieve all the objects' meta within the bundle using the bundle's ",(0,r.kt)("inlineCode",{parentName:"li"},"GetBundleObjectsMeta")," method.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Extract objects from bundled object\n    objMeta, err := bundle.GetBundleObjectsMeta(bundleFile.Name())\n    handleErr(err, "GetBundleObjectsMeta")\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Access various objects one by one using the bundle's ",(0,r.kt)("inlineCode",{parentName:"li"},"GetObject")," method.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    obj1, size, err := bundle.GetObject("object1")\n    if err != nil || obj1 == nil || size != singleObjectSize {\n        handleErr(fmt.Errorf("parse object1 in bundled object failed: %v", err), "GetObject")\n    }\n    obj2, size, err := bundle.GetObject("object2")\n    if err != nil || obj2 == nil || size != singleObjectSize {\n        handleErr(fmt.Errorf("parse object2 in bundled object failed: %v", err), "GetObject")\n    }\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"To release resources after use, utilize the Close method of the bundle.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"}," defer bundle.Close()\n")),(0,r.kt)("p",null,"Full example ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/greenfield-bundle-sdk/blob/master/examples/download_bundle.go"},"here")))}p.isMDXComponent=!0}}]);