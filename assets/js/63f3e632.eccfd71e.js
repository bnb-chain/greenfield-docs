"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[1682],{66063:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>b,frontMatter:()=>p,metadata:()=>h,toc:()=>g});var s=a(87462),i=(a(67294),a(3905)),r=a(26389),n=a(94891),o=(a(75190),a(47507)),l=a(24310),m=a(63303),d=(a(75035),a(85162));const p={id:"challenge-params",title:"ChallengeParams",description:"Parameters queries the parameters of the module.",sidebar_label:"ChallengeParams",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"ChallengeParams",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{params:{description:"params holds all the parameters of this module.",type:"object",properties:{challenge_count_per_block:{type:"string",format:"uint64",description:"Challenges which will be emitted in each block, including user submitted or randomly triggered."},challenge_keep_alive_period:{type:"string",format:"uint64",description:"Challenges will be expired after the period, including user submitted or randomly triggered."},slash_cooling_off_period:{type:"string",format:"uint64",description:"The count of blocks to stand for the period in which the same storage and object info cannot be slashed again."},slash_amount_size_rate:{type:"string",description:"The slash coin amount will be calculated from the size of object info, and adjusted by this rate."},slash_amount_min:{type:"string",description:"The minimal slash amount."},slash_amount_max:{type:"string",description:"The maximum slash amount."},reward_validator_ratio:{type:"string",description:"The ratio of slash amount to reward all current validators."},reward_submitter_ratio:{type:"string",description:"The ratio of reward amount to reward attestation submitter."},reward_submitter_threshold:{type:"string",description:"The reward amount to submitter will be adjusted by the threshold."},heartbeat_interval:{type:"string",format:"uint64",description:"Heartbeat interval, based on challenge id, defines the frequency of heartbeat attestation."},attestation_inturn_interval:{type:"string",format:"uint64",description:"The time duration for each submitter to submit attestations in turn."},attestation_kept_count:{type:"string",format:"uint64",description:"The number of kept attested challenge ids, which can be queried by clients."},sp_slash_max_amount:{type:"string",description:"The max slash amount for a sp in a counting window."},sp_slash_counting_window:{type:"string",format:"uint64",description:"The number of blocks to count how much a sp had been slashed."}}}},description:"QueryParamsResponse is response type for the Query/Params RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string"},value:{type:"string",format:"byte"}}}}}}}}}},tags:["challenge"],description:"Parameters queries the parameters of the module.",method:"get",path:"/greenfield/challenge/params",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"ChallengeParams",description:{content:"Parameters queries the parameters of the module.",type:"text/plain"},url:{path:["greenfield","challenge","params"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},c=void 0,h={unversionedId:"greenfield-api/challenge-params",id:"greenfield-api/challenge-params",title:"ChallengeParams",description:"Parameters queries the parameters of the module.",source:"@site/docs/greenfield-api/challenge-params.api.mdx",sourceDirName:"greenfield-api",slug:"/greenfield-api/challenge-params",permalink:"/greenfield-docs/docs/greenfield-api/challenge-params",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"challenge-params",title:"ChallengeParams",description:"Parameters queries the parameters of the module.",sidebar_label:"ChallengeParams",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"ChallengeParams",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{params:{description:"params holds all the parameters of this module.",type:"object",properties:{challenge_count_per_block:{type:"string",format:"uint64",description:"Challenges which will be emitted in each block, including user submitted or randomly triggered."},challenge_keep_alive_period:{type:"string",format:"uint64",description:"Challenges will be expired after the period, including user submitted or randomly triggered."},slash_cooling_off_period:{type:"string",format:"uint64",description:"The count of blocks to stand for the period in which the same storage and object info cannot be slashed again."},slash_amount_size_rate:{type:"string",description:"The slash coin amount will be calculated from the size of object info, and adjusted by this rate."},slash_amount_min:{type:"string",description:"The minimal slash amount."},slash_amount_max:{type:"string",description:"The maximum slash amount."},reward_validator_ratio:{type:"string",description:"The ratio of slash amount to reward all current validators."},reward_submitter_ratio:{type:"string",description:"The ratio of reward amount to reward attestation submitter."},reward_submitter_threshold:{type:"string",description:"The reward amount to submitter will be adjusted by the threshold."},heartbeat_interval:{type:"string",format:"uint64",description:"Heartbeat interval, based on challenge id, defines the frequency of heartbeat attestation."},attestation_inturn_interval:{type:"string",format:"uint64",description:"The time duration for each submitter to submit attestations in turn."},attestation_kept_count:{type:"string",format:"uint64",description:"The number of kept attested challenge ids, which can be queried by clients."},sp_slash_max_amount:{type:"string",description:"The max slash amount for a sp in a counting window."},sp_slash_counting_window:{type:"string",format:"uint64",description:"The number of blocks to count how much a sp had been slashed."}}}},description:"QueryParamsResponse is response type for the Query/Params RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string"},value:{type:"string",format:"byte"}}}}}}}}}},tags:["challenge"],description:"Parameters queries the parameters of the module.",method:"get",path:"/greenfield/challenge/params",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"ChallengeParams",description:{content:"Parameters queries the parameters of the module.",type:"text/plain"},url:{path:["greenfield","challenge","params"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},sidebar:"apiReferenceSidebar",previous:{title:"LatestAttestedChallenges",permalink:"/greenfield-docs/docs/greenfield-api/latest-attested-challenges"},next:{title:"AutoSettleRecords",permalink:"/greenfield-docs/docs/greenfield-api/auto-settle-records"}},u={},g=[{value:"ChallengeParams",id:"challengeparams",level:2}],f={toc:g},y="wrapper";function b(e){let{components:t,...a}=e;return(0,i.kt)(y,(0,s.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"challengeparams"},"ChallengeParams"),(0,i.kt)("p",null,"Parameters queries the parameters of the module."),(0,i.kt)("div",null,(0,i.kt)(r.Z,{mdxType:"ApiTabs"},(0,i.kt)(d.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"A successful response.")),(0,i.kt)("div",null,(0,i.kt)(n.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(d.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,i.kt)(m.Z,{mdxType:"SchemaTabs"},(0,i.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"params"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"params holds all the parameters of this module.")),(0,i.kt)(l.Z,{collapsible:!1,name:"challenge_count_per_block",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"Challenges which will be emitted in each block, including user submitted or randomly triggered."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"challenge_keep_alive_period",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"Challenges will be expired after the period, including user submitted or randomly triggered."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"slash_cooling_off_period",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"The count of blocks to stand for the period in which the same storage and object info cannot be slashed again."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"slash_amount_size_rate",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The slash coin amount will be calculated from the size of object info, and adjusted by this rate."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"slash_amount_min",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The minimal slash amount."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"slash_amount_max",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The maximum slash amount."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"reward_validator_ratio",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The ratio of slash amount to reward all current validators."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"reward_submitter_ratio",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The ratio of reward amount to reward attestation submitter."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"reward_submitter_threshold",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The reward amount to submitter will be adjusted by the threshold."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"heartbeat_interval",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"Heartbeat interval, based on challenge id, defines the frequency of heartbeat attestation."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"attestation_inturn_interval",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"The time duration for each submitter to submit attestations in turn."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"attestation_kept_count",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"The number of kept attested challenge ids, which can be queried by clients."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"sp_slash_max_amount",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"The max slash amount for a sp in a counting window."},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"sp_slash_counting_window",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"The number of blocks to count how much a sp had been slashed."},mdxType:"SchemaItem"}))))))),(0,i.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(o.Z,{responseExample:'{\n  "params": {\n    "challenge_count_per_block": "string",\n    "challenge_keep_alive_period": "string",\n    "slash_cooling_off_period": "string",\n    "slash_amount_size_rate": "string",\n    "slash_amount_min": "string",\n    "slash_amount_max": "string",\n    "reward_validator_ratio": "string",\n    "reward_submitter_ratio": "string",\n    "reward_submitter_threshold": "string",\n    "heartbeat_interval": "string",\n    "attestation_inturn_interval": "string",\n    "attestation_kept_count": "string",\n    "sp_slash_max_amount": "string",\n    "sp_slash_counting_window": "string"\n  }\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,i.kt)(d.Z,{label:"default",value:"default",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"An unexpected error response.")),(0,i.kt)("div",null,(0,i.kt)(n.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(d.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,i.kt)(m.Z,{mdxType:"SchemaTabs"},(0,i.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"error",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"code",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"message",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"details"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"type_url",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"value",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,i.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(o.Z,{responseExample:'{\n  "error": "string",\n  "code": 0,\n  "message": "string",\n  "details": [\n    {\n      "type_url": "string",\n      "value": "string"\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}b.isMDXComponent=!0}}]);