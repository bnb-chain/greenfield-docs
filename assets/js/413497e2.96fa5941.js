"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[5810],{45221:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>m,default:()=>b,frontMatter:()=>c,metadata:()=>g,toc:()=>u});var a=s(87462),l=(s(67294),s(3905)),n=s(26389),i=s(94891),r=(s(75190),s(47507)),d=s(24310),o=s(63303),p=(s(75035),s(85162));const c={id:"latest-attested-challenges",title:"LatestAttestedChallenges",description:"Queries the latest attested challenges.",sidebar_label:"LatestAttestedChallenges",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"LatestAttestedChallenges",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{challenges:{type:"array",items:{type:"object",properties:{id:{type:"string",format:"uint64",description:"The id of the challenge."},result:{description:"The attestation result of the challenge.",type:"string",enum:["CHALLENGE_FAILED","CHALLENGE_SUCCEED"],default:"CHALLENGE_FAILED"}},description:"AttestedChallenge records the challenge which are attested."}}},description:"QueryLatestAttestedChallengesResponse is response type for the Query/LatestAttestedChallenges RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string"},value:{type:"string",format:"byte"}}}}}}}}}},tags:["challenge"],description:"Queries the latest attested challenges.",method:"get",path:"/greenfield/challenge/latest_attested_challenges",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"LatestAttestedChallenges",description:{content:"Queries the latest attested challenges.",type:"text/plain"},url:{path:["greenfield","challenge","latest_attested_challenges"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},m=void 0,g={unversionedId:"greenfield-api/latest-attested-challenges",id:"greenfield-api/latest-attested-challenges",title:"LatestAttestedChallenges",description:"Queries the latest attested challenges.",source:"@site/docs/greenfield-api/latest-attested-challenges.api.mdx",sourceDirName:"greenfield-api",slug:"/greenfield-api/latest-attested-challenges",permalink:"/greenfield-docs/docs/greenfield-api/latest-attested-challenges",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"latest-attested-challenges",title:"LatestAttestedChallenges",description:"Queries the latest attested challenges.",sidebar_label:"LatestAttestedChallenges",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"LatestAttestedChallenges",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{challenges:{type:"array",items:{type:"object",properties:{id:{type:"string",format:"uint64",description:"The id of the challenge."},result:{description:"The attestation result of the challenge.",type:"string",enum:["CHALLENGE_FAILED","CHALLENGE_SUCCEED"],default:"CHALLENGE_FAILED"}},description:"AttestedChallenge records the challenge which are attested."}}},description:"QueryLatestAttestedChallengesResponse is response type for the Query/LatestAttestedChallenges RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string"},value:{type:"string",format:"byte"}}}}}}}}}},tags:["challenge"],description:"Queries the latest attested challenges.",method:"get",path:"/greenfield/challenge/latest_attested_challenges",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"LatestAttestedChallenges",description:{content:"Queries the latest attested challenges.",type:"text/plain"},url:{path:["greenfield","challenge","latest_attested_challenges"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},sidebar:"apiReferenceSidebar",previous:{title:"InturnAttestationSubmitter",permalink:"/greenfield-docs/docs/greenfield-api/inturn-attestation-submitter"},next:{title:"ChallengeParams",permalink:"/greenfield-docs/docs/greenfield-api/challenge-params"}},h={},u=[{value:"LatestAttestedChallenges",id:"latestattestedchallenges",level:2}],y={toc:u},f="wrapper";function b(e){let{components:t,...s}=e;return(0,l.kt)(f,(0,a.Z)({},y,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"latestattestedchallenges"},"LatestAttestedChallenges"),(0,l.kt)("p",null,"Queries the latest attested challenges."),(0,l.kt)("div",null,(0,l.kt)(n.Z,{mdxType:"ApiTabs"},(0,l.kt)(p.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,l.kt)("div",null,(0,l.kt)("p",null,"A successful response.")),(0,l.kt)("div",null,(0,l.kt)(i.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,l.kt)(p.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,l.kt)(o.Z,{mdxType:"SchemaTabs"},(0,l.kt)(p.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,l.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,l.kt)("summary",{style:{textAlign:"left"}},(0,l.kt)("strong",null,"Schema")),(0,l.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,l.kt)("ul",{style:{marginLeft:"1rem"}},(0,l.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,l.kt)("details",{style:{}},(0,l.kt)("summary",{style:{}},(0,l.kt)("strong",null,"challenges"),(0,l.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,l.kt)("div",{style:{marginLeft:"1rem"}},(0,l.kt)("li",null,(0,l.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,l.kt)(d.Z,{collapsible:!1,name:"id",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64",description:"The id of the challenge."},mdxType:"SchemaItem"}),(0,l.kt)(d.Z,{collapsible:!1,name:"result",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`CHALLENGE_FAILED`, `CHALLENGE_SUCCEED`]",schema:{description:"The attestation result of the challenge.",type:"string",enum:["CHALLENGE_FAILED","CHALLENGE_SUCCEED"],default:"CHALLENGE_FAILED"},mdxType:"SchemaItem"}),(0,l.kt)("li",null,(0,l.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,l.kt)(p.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,l.kt)(r.Z,{responseExample:'{\n  "challenges": [\n    {\n      "id": "string",\n      "result": "CHALLENGE_FAILED"\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,l.kt)(p.Z,{label:"default",value:"default",mdxType:"TabItem"},(0,l.kt)("div",null,(0,l.kt)("p",null,"An unexpected error response.")),(0,l.kt)("div",null,(0,l.kt)(i.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,l.kt)(p.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,l.kt)(o.Z,{mdxType:"SchemaTabs"},(0,l.kt)(p.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,l.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,l.kt)("summary",{style:{textAlign:"left"}},(0,l.kt)("strong",null,"Schema")),(0,l.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,l.kt)("ul",{style:{marginLeft:"1rem"}},(0,l.kt)(d.Z,{collapsible:!1,name:"error",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,l.kt)(d.Z,{collapsible:!1,name:"code",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,l.kt)(d.Z,{collapsible:!1,name:"message",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,l.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,l.kt)("details",{style:{}},(0,l.kt)("summary",{style:{}},(0,l.kt)("strong",null,"details"),(0,l.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,l.kt)("div",{style:{marginLeft:"1rem"}},(0,l.kt)("li",null,(0,l.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,l.kt)(d.Z,{collapsible:!1,name:"type_url",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,l.kt)(d.Z,{collapsible:!1,name:"value",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,l.kt)("li",null,(0,l.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,l.kt)(p.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,l.kt)(r.Z,{responseExample:'{\n  "error": "string",\n  "code": 0,\n  "message": "string",\n  "details": [\n    {\n      "type_url": "string",\n      "value": "string"\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}b.isMDXComponent=!0}}]);