"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[7402],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},46903:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_label:"How to transition from S3 to Greenfield",title:"How to transition from S3 to Greenfield",description:"BNB Greenfield is a blockchain-based decentralized storage solution designed to enhance the decentralization of data ownership and management, allowing users to manage their own data and assets."},o="How to transition from S3 to Greenfield",c={unversionedId:"tutorials/get-started/transitioning-from-s3-to-greenfield",id:"tutorials/get-started/transitioning-from-s3-to-greenfield",title:"How to transition from S3 to Greenfield",description:"BNB Greenfield is a blockchain-based decentralized storage solution designed to enhance the decentralization of data ownership and management, allowing users to manage their own data and assets.",source:"@site/docs/tutorials/get-started/transitioning-from-s3-to-greenfield.md",sourceDirName:"tutorials/get-started",slug:"/tutorials/get-started/transitioning-from-s3-to-greenfield",permalink:"/greenfield-docs/docs/tutorials/get-started/transitioning-from-s3-to-greenfield",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/tutorials/get-started/transitioning-from-s3-to-greenfield.md",tags:[],version:"current",frontMatter:{sidebar_label:"How to transition from S3 to Greenfield",title:"How to transition from S3 to Greenfield",description:"BNB Greenfield is a blockchain-based decentralized storage solution designed to enhance the decentralization of data ownership and management, allowing users to manage their own data and assets."},sidebar:"tutorialsSidebar",previous:{title:"Access Control Management with CLI",permalink:"/greenfield-docs/docs/tutorials/get-started/cmd-access-control"},next:{title:"Overview",permalink:"/greenfield-docs/docs/tutorials/app/overview"}},s={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Init SDK client",id:"init-sdk-client",level:2},{value:"Create bucket",id:"create-bucket",level:2},{value:"List buckets",id:"list-buckets",level:2},{value:"Delete bucket",id:"delete-bucket",level:2},{value:"Create object",id:"create-object",level:2},{value:"List objects",id:"list-objects",level:2},{value:"Delete object",id:"delete-object",level:2},{value:"Get Object",id:"get-object",level:2},{value:"<strong>Summary</strong>",id:"summary",level:2},{value:"Attached code",id:"attached-code",level:2},{value:"Example of Greenfield Integration",id:"example-of-greenfield-integration",level:3},{value:"Example of S3 Integration",id:"example-of-s3-integration",level:3}],d={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-transition-from-s3-to-greenfield"},"How to transition from S3 to Greenfield"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Greenfield is a blockchain-based decentralized storage solution designed to enhance the decentralization of data ownership and management, allowing users to manage their own data and assets. This platform promotes the development of decentralized applications (dApps) by offering on-chain data permission management and APIs similar to those of Web2, enhancing data security and management capabilities through the introduction of Storage Providers (SPs), which are responsible for providing authentication and storage services."),(0,a.kt)("p",null,"In terms of permission management, SPs offer a range of authentication services. Unlike AWS S3, which control user permissions through AWS Keys and AWS Secrets, SPs in Greenfield use private keys for permission control. This means that on the Greenfield platform, permission authentication is reliant on blockchain technology, ensuring security and decentralization, while also extending blockchain functionalities, including permission authentication and data storage capabilities."),(0,a.kt)("p",null,"In Greenfield's design, users have the freedom to select any SP as their Primary SP, along with additional SPs as Secondary SPs, ensuring both performance and reliability in object storage. Primary SPs are primarily responsible for storing all data segments of an object and directly responding to user read or download requests, whereas Secondary SPs store data blocks generated by Erasure Coding (EC) technology, helping to improve data availability."),(0,a.kt)("p",null,"Compared to AWS S3, Greenfield's distributed storage structure not only enhances data durability and recoverability but also ensures data integrity and verifiability using blockchain technology. Through this approach, Greenfield is committed to promoting a new data economy and dApp model construction, improving the transparency and efficiency of data management, and realizing data decentralization management and ownership proof through blockchain technology."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"We will now showcase on the SDK through Greenfield and AWS S3.")),(0,a.kt)("h2",{id:"init-sdk-client"},"Init SDK client"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    AWSKey          = "mock-aws-key"\n    AWSSecret       = "mock-aws-secret"\n    Region          = "us-east-1"\n)\n\ncfg, err := config.LoadDefaultConfig(context.TODO(),\n    config.WithRegion(Region),\n    config.WithCredentialsProvider(credentials.NewStaticCredentialsProvider(AWSKey, AWSSecret, "")),\n)\nhandleErr(err, "LoadDefaultConfig")\nclient := s3.NewFromConfig(cfg)\n')),(0,a.kt)("p",null,"For AWS S3, the initialization uses the AWS Key and AWS Secret to create an AWS S3 client to allow user interaction. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Region")," specifies the region where the user's bucket is located."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    RpcAddr         = "https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org:443" // Greenfield Testnet RPC Address\n    ChainId         = "greenfield_5600-1" // Greenfield Testnet Chain ID\n    PrivateKey      = "mock-private-key"\n)\nclient, primarySP, err := NewFromConfig(ChainId, RpcAddr, PrivateKey)\nhandleErr(err, "NewFromConfig")\n')),(0,a.kt)("p",null,"For Greenfield, the RPC Address and Chain ID are used to select the specific Greenfield network, with the example above being for the Testnet. Users need to interact using a private key exported from their wallet."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Greenfield Mainnet Chain ID: greenfield_1017-1"),(0,a.kt)("p",{parentName:"blockquote"},"Greenfield Mainnet RPC"),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://greenfield-chain.bnbchain.org:443"},"https://greenfield-chain.bnbchain.org:443")),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://greenfield-chain-ap.bnbchain.org:443"},"https://greenfield-chain-ap.bnbchain.org:443")),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://greenfield-chain-eu.bnbchain.org:443"},"https://greenfield-chain-eu.bnbchain.org:443")),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://greenfield-chain-us.bnbchain.org:443"},"https://greenfield-chain-us.bnbchain.org:443"))),(0,a.kt)("h2",{id:"create-bucket"},"Create bucket"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\n_, err = client.CreateBucket(context.TODO(), &s3.CreateBucketInput{\n    Bucket: aws.String(BucketName),\n})\nhandleErr(err, "CreateBucket")\n')),(0,a.kt)("p",null,"In AWS S3, the ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateBucket")," method is called with a configuration object specifying the bucket name. The operation is straightforward, reflecting S3's cloud storage focus, where the primary concern is the creation and management of storage containers in the cloud."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\n_, err = client.CreateBucket(context.TODO(), BucketName, primarySP, types.CreateBucketOptions{})\nhandleErr(err, "CreateBucket")\n')),(0,a.kt)("p",null,"For Greenfield, the ",(0,a.kt)("inlineCode",{parentName:"p"},"CreateBucket")," method also requires a bucket name but includes additional parameters like ",(0,a.kt)("inlineCode",{parentName:"p"},"primarySP"),", which is obtained during client initialization. The ",(0,a.kt)("inlineCode",{parentName:"p"},"primarySP")," plays a crucial role in executing and storing corresponding bucket data, indicating a more complex interaction pattern likely due to the blockchain-based nature of Greenfield."),(0,a.kt)("h2",{id:"list-buckets"},"List buckets"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\nbucketsList, err := client.ListBuckets(context.TODO(), &s3.ListBucketsInput{})\nhandleErr(err, "ListBuckets")\nfor _, bucket := range bucketsList.Buckets {\n    fmt.Printf("* %s\\n", aws.ToString(bucket.Name))\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\nbucketsList, err := client.ListBuckets(context.TODO(), types.ListBucketsOptions{})\nhandleErr(err, "ListBuckets")\nfor _, bucket := range bucketsList.Buckets {\n    fmt.Printf("* %s\\n", bucket.BucketInfo.BucketName)\n}\n')),(0,a.kt)("p",null,"During the initialization of the client for both systems, user information is already obtained, allowing for the return of corresponding buckets through a ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," object. This process indicates that transitioning from AWS S3 to Greenfield can be achieved with minimal effort and cost."),(0,a.kt)("h2",{id:"delete-bucket"},"Delete bucket"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\n_, err = client.DeleteBucket(context.TODO(), &s3.DeleteBucketInput{\n    Bucket: aws.String(BucketName),\n})\nhandleErr(err, "Delete Bucket")\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\n_, err = cli.DeleteBucket(context.TODO(), BucketName, types.DeleteBucketOption{})\nhandleErr(err, "Delete Bucket")\n')),(0,a.kt)("p",null,"The process of deleting a bucket in both AWS S3 and Greenfield is essentially identical, allowing users to easily delete a bucket by simply using its name."),(0,a.kt)("h2",{id:"create-object"},"Create object"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "test-api.js"\n)\n\n_, err = client.PutObject(context.TODO(), &s3.PutObjectInput{\n    Bucket: aws.String(BucketName),\n    Key:    aws.String(ObjectKey),\n    Body:   file,\n    })\nhandleErr(err, "PutObject")\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "test-api.js"\n)\n\ntxnHash, err := cli.CreateObject(context.TODO(), BucketName, ObjectKey, file, types.CreateObjectOptions{})\nhandleErr(err, "CreateObject")\n\nerr = cli.PutObject(context.TODO(), BucketName, ObjectKey, int64(fileInfo.Size()),\nfile, types.PutObjectOptions{TxnHash: txnHash})\nhandleErr(err, "PutObject")\n')),(0,a.kt)("p",null,"In the process of creating objects, there is a difference between Greenfield and S3. In Greenfield, it is necessary to first create the object before performing the put object operation. This is because Greenfield requires users to create metadata on the Greenfield blockchain before submitting object to the SP, in order to ensure the integrity of the object."),(0,a.kt)("h2",{id:"list-objects"},"List objects"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\nobjects, err := client.ListObjectsV2(context.TODO(), &s3.ListObjectsV2Input{\n    Bucket: aws.String(BucketName),\n})\nhandleErr(err, "ListObjectsV2")\nfor _, item := range objects.Contents {\n    fmt.Printf("* %s\\n", aws.ToString(item.Key))\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n)\n\nobjects, err := cli.ListObjects(context.TODO(), BucketName, types.ListObjectsOptions{\n})\nhandleErr(err, "ListObjects")\nfor _, obj := range objects.Objects {\n    log.Printf("* %s\\n", obj.ObjectInfo.ObjectName)\n}\n')),(0,a.kt)("p",null,"In both AWS S3 and Greenfield, retrieving all objects within a bucket can be easily accomplished by simply using the bucket's name. This functionality indicates a user-friendly approach to data management, allowing users to efficiently access and manage the contents of their storage without the need for intricate query parameters or complex configuration."),(0,a.kt)("h2",{id:"delete-object"},"Delete object"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "test-api.js"\n)\n\n_, err = client.DeleteObject(context.TODO(), &s3.DeleteObjectInput{\n    Bucket: aws.String(BucketName),\n    Key:    aws.String(ObjectKey),\n})\nhandleErr(err, "Delete Object")\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "test-api.js"\n)\n\n_, err = cli.DeleteObject(context.TODO(), BucketName, ObjectKey, types.DeleteObjectOption{})\nhandleErr(err, "Delete Object")\n')),(0,a.kt)("p",null,"Deleting an object in both AWS S3 and Greenfield is fundamentally similar, enabling users to effortlessly remove an object by specifying both the bucket name and the object name."),(0,a.kt)("h2",{id:"get-object"},"Get Object"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"S3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "test-api.js"\n)\n\nresp, err := client.GetObject(context.TODO(), &s3.GetObjectInput{\n    Bucket: aws.String(BucketName),\n    Key:    aws.String(ObjectKey),\n})\nhandleErr(err, "GetObject")\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Greenfield")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "test-api.js"\n)\n\nresp, _, err := cli.GetObject(context.TODO(), BucketName, ObjectKey, types.GetObjectOptions{})\nhandleErr(err, "GetObject")\n')),(0,a.kt)("h2",{id:"summary"},(0,a.kt)("strong",{parentName:"h2"},"Summary")),(0,a.kt)("p",null,"AWS S3 and Greenfield offer streamlined data retrieval processes, with users specifying bucket and object names for efficient access. While AWS S3 relies on key-pair authentication and region specification for data locality and access efficiency, Greenfield adopts a blockchain-based approach, using private keys for authentication and RPC Addresses along with Chain IDs for network connectivity. Greenfield enhances service quality through regional RPC endpoints, allowing users to choose the most efficient connection based on their location."),(0,a.kt)("p",null,"The structural similarity in SDKs for operations like bucket creation is notable, with Greenfield requiring an additional step to obtain a primarySP during client initialization. This minimal difference suggests a smooth transition for S3 users to Greenfield, highlighting the ease of adaptation due to familiar SDK code structures and metadata handling. Moreover, Greenfield introduces a two-step object management process, offering greater control over object lifecycle states than S3's more straightforward approach. Despite this, the core functionalities remain similar, ensuring that S3 users can quickly adapt to Greenfield's environment without significant hurdles."),(0,a.kt)("p",null,"Overall, the transition from AWS S3 to Greenfield is facilitated by similar SDK coding practices and metadata management approaches, making it accessible for users familiar with S3 to migrate to Greenfield's blockchain-based storage solution with minimal learning curve. This compatibility underscores the potential for seamless adaptation, leveraging existing cloud storage knowledge while navigating the nuances of blockchain technology."),(0,a.kt)("h2",{id:"attached-code"},"Attached code"),(0,a.kt)("h3",{id:"example-of-greenfield-integration"},"Example of Greenfield Integration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "bytes"\n    "context"\n    "fmt"\n    "io"\n    "log"\n    "os"\n    "time"\n\n    "github.com/bnb-chain/greenfield-go-sdk/client"\n    "github.com/bnb-chain/greenfield-go-sdk/types"\n)\n\n// The config information is consistent with the testnet of greenfield\n// You need to set the privateKey, bucketName, objectName and groupName to make the basic examples work well\nconst (\n    RpcAddr         = "https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org:443"\n    ChainId         = "greenfield_5600-1"\n    PrivateKey      = "mock-private-key"\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "api.js"\n    UploadObjectKey = "test-api.js"\n    DownloadPath    = "/Users/Desktop/s3test/"\n    UploadPath      = "/Users/Desktop/s3test/"\n)\n\nfunc main() {\n    cli, primarySP, err := NewFromConfig(ChainId, RpcAddr, PrivateKey)\n    handleErr(err, "NewFromConfig")\n\n    // create bucket\n    _, err = cli.CreateBucket(context.TODO(), BucketName, primarySP, types.CreateBucketOptions{})\n    handleErr(err, "CreateBucket")\n\n    // list buckets\n    bucketsList, err := cli.ListBuckets(context.TODO(), types.ListBucketsOptions {\n        ShowRemovedBucket: false,\n    })\n    handleErr(err, "ListBuckets")\n    for _, bucket := range bucketsList.Buckets {\n        fmt.Printf("* %s\\n", bucket.BucketInfo.BucketName)\n    }\n\n    // create object\n    file, err := os.Open(UploadPath + UploadObjectKey)\n    handleErr(err, "PutObject")\n    defer file.Close()\n\n    fileInfo, err := file.Stat()\n    handleErr(err, "Stat")\n\n    // create object\n    txnHash, err := cli.CreateObject(context.TODO(), BucketName, UploadObjectKey, file, types.CreateObjectOptions{})\n    handleErr(err, "CreateObject")\n\n    var buf bytes.Buffer\n    _, err = io.Copy(&buf, file)\n\n    // put object\n    err = cli.PutObject(context.TODO(), BucketName, UploadObjectKey, int64(fileInfo.Size()),\n    file, types.PutObjectOptions{TxnHash: txnHash})\n    handleErr(err, "PutObject")\n\n    // wait for object having been successfully uploaded\n    time.Sleep(10 * time.Second)\n\n    // list objects\n    objects, err := cli.ListObjects(context.TODO(), BucketName, types.ListObjectsOptions {\n        ShowRemovedObject: false, Delimiter: "", MaxKeys: 100, SPAddress: "",\n    })\n    handleErr(err, "ListObjects")\n    for _, obj := range objects.Objects {\n        log.Printf("* %s\\n", obj.ObjectInfo.ObjectName)\n    }\n\n    // get object\n    reader, _, err := cli.GetObject(context.TODO(), BucketName, UploadObjectKey, types.GetObjectOptions{})\n    handleErr(err, "GetObject")\n\n    outFile, err := os.Create(DownloadPath + ObjectKey)\n    handleErr(err, "DownloadObject")\n    defer outFile.Close()\n\n    _, err = io.Copy(outFile, reader)\n    handleErr(err, "DownloadObject")\n}\n\nfunc NewFromConfig(chainID, rpcAddress, privateKeyStr string) (client.IClient, string, error) {\n    account, err := types.NewAccountFromPrivateKey("test", privateKeyStr)\n    if err != nil {\n        log.Fatalf("New account from private key error, %v", err)\n        return nil, "", err\n    }\n\n    cli, err := client.New(chainID, rpcAddress, client.Option{DefaultAccount: account})\n    if err != nil {\n        log.Fatalf("unable to new greenfield client, %v", err)\n        return nil, "", err\n    }\n    ctx := context.Background()\n\n    // get storage providers list\n    spLists, err := cli.ListStorageProviders(ctx, true)\n    if err != nil {\n        log.Fatalf("fail to list in service sps")\n        return nil, "", err\n    }\n    // choose the first sp to be the primary SP\n    primarySP := spLists[0].GetOperatorAddress()\n    return cli, primarySP, nil\n}\n\nfunc handleErr(err error, funcName string) {\n    if err != nil {\n        log.Fatalln("fail to " + funcName + ": " + err.Error())\n    }\n}\n')),(0,a.kt)("h3",{id:"example-of-s3-integration"},"Example of S3 Integration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "io"\n    "log"\n    "os"\n    "time"\n\n    "github.com/aws/aws-sdk-go-v2/aws"\n    "github.com/aws/aws-sdk-go-v2/config"\n    "github.com/aws/aws-sdk-go-v2/credentials"\n    "github.com/aws/aws-sdk-go-v2/service/s3"\n)\n\nconst (\n    AWSKey          = "mock-aws-key"\n    AWSSecret       = "mock-aws-secret"\n    Region          = "us-east-1"\n    BucketName      = "mock-bucket-name"\n    ObjectKey       = "mock-object-name"\n    UploadObjectKey = "test-api.js"\n    DownloadPath    = "/Users/Desktop/s3test/"\n    UploadPath      = "/Users/Desktop/s3test/"\n)\n\nfunc main() {\n    // set up aws s3 config\n    cfg, err := config.LoadDefaultConfig(context.TODO(),\n        config.WithRegion(Region),\n        config.WithCredentialsProvider(credentials.NewStaticCredentialsProvider(AWSKey, AWSSecret, "")),\n    )\n    handleErr(err, "LoadDefaultConfig")\n    client := s3.NewFromConfig(cfg)\n\n    // create bucket\n    _, err = client.CreateBucket(context.TODO(), &s3.CreateBucketInput {\n        Bucket: aws.String(BucketName),\n    })\n    handleErr(err, "CreateBucket")\n\n    // list buckets by owner\n    result, err := client.ListBuckets(context.TODO(), &s3.ListBucketsInput{})\n    handleErr(err, "ListBuckets")\n    for _, bucket := range result.Buckets {\n        fmt.Printf("* %s\\n", aws.ToString(bucket.Name))\n    }\n\n    // create object\n    file, err := os.Open(UploadPath + UploadObjectKey)\n    handleErr(err, "PutObject")\n    defer file.Close()\n\n    _, err = client.PutObject(context.TODO(), &s3.PutObjectInput {\n        Bucket: aws.String(BucketName),\n        Key:    aws.String(UploadObjectKey),\n        Body:   file,\n    })\n    handleErr(err, "PutObject")\n\n    // wait for object having been successfully uploaded\n    time.Sleep(10 * time.Second)\n    objects, err := client.ListObjectsV2(context.TODO(), &s3.ListObjectsV2Input {\n        Bucket: aws.String(BucketName),\n    })\n    handleErr(err, "ListObjectsV2")\n    for _, item := range objects.Contents {\n        fmt.Printf("* %s\\n", aws.ToString(item.Key))\n    }\n\n    // download object\n    resp, err := client.GetObject(context.TODO(), &s3.GetObjectInput {\n        Bucket: aws.String(BucketName),\n        Key:    aws.String(UploadObjectKey),\n    })\n    handleErr(err, "DownloadObject")\n\n    defer resp.Body.Close()\n\n    outFile, err := os.Create(DownloadPath + ObjectKey)\n    handleErr(err, "DownloadObject")\n\n    defer outFile.Close()\n\n    _, err = io.Copy(outFile, resp.Body)\n    handleErr(err, "DownloadObject")\n\n    _, err = client.DeleteObject(context.TODO(), &s3.DeleteObjectInput {\n        Bucket: aws.String(BucketName),\n        Key:    aws.String(ObjectKey),\n    })\n    handleErr(err, "Delete Object")\n\n    _, err = client.DeleteBucket(context.TODO(), &s3.DeleteBucketInput {\n        Bucket: aws.String(BucketName),\n    })\n    handleErr(err, "Delete Bucket")\n}\n\nfunc handleErr(err error, funcName string) {\n    if err != nil {\n        log.Fatalln("fail to " + funcName + ": " + err.Error())\n    }\n}\n')))}p.isMDXComponent=!0}}]);