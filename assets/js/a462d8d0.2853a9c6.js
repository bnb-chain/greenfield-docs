"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[932],{91482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>h,default:()=>v,frontMatter:()=>c,metadata:()=>y,toc:()=>u});var a=n(87462),i=(n(67294),n(3905)),o=n(26389),s=n(94891),r=n(75190),l=n(47507),d=n(24310),p=n(63303),m=(n(75035),n(85162));const c={id:"validator",title:"Validator",description:"Validator queries validator info for given validator address.",sidebar_label:"Validator",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"Validator",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{validator:{type:"object",properties:{operator_address:{type:"string",description:"operator_address defines the address of the validator's operator; bech encoded in JSON."},consensus_pubkey:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'},jailed:{type:"boolean",description:"jailed defined whether the validator has been jailed from bonded status or not."},status:{description:"status is the validator status (bonded/unbonding/unbonded).",type:"string",enum:["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],default:"BOND_STATUS_UNSPECIFIED"},tokens:{type:"string",description:"tokens define the delegated tokens (incl. self-delegation)."},delegator_shares:{type:"string",description:"delegator_shares defines total shares issued to a validator's delegators."},description:{description:"description defines the description terms for the validator.",type:"object",properties:{moniker:{type:"string",description:"moniker defines a human-readable name for the validator."},identity:{type:"string",description:"identity defines an optional identity signature (ex. UPort or Keybase)."},website:{type:"string",description:"website defines an optional website link."},security_contact:{type:"string",description:"security_contact defines an optional email for security contact."},details:{type:"string",description:"details define other optional details."}}},unbonding_height:{type:"string",format:"int64",description:"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},unbonding_time:{type:"string",format:"date-time",description:"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},commission:{description:"commission defines the commission parameters.",type:"object",properties:{commission_rates:{description:"commission_rates defines the initial commission rates to be used for creating a validator.",type:"object",properties:{rate:{type:"string",description:"rate is the commission rate charged to delegators, as a fraction."},max_rate:{type:"string",description:"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},max_change_rate:{type:"string",description:"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},update_time:{type:"string",format:"date-time",description:"update_time is the last time the commission rate was changed."}}},min_self_delegation:{type:"string",description:"min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"},unbonding_on_hold_ref_count:{type:"string",format:"int64",title:"strictly positive if this validator's unbonding has been stopped by external modules"},unbonding_ids:{type:"array",items:{type:"string",format:"uint64"},title:"list of unbonding ids, each uniquely identifing an unbonding of this validator"},self_del_address:{type:"string",description:"self_del_address defines the address of the validator for self delegation."},relayer_address:{type:"string",description:"relayer_address defines the address of the validator's authorized relayer;."},challenger_address:{type:"string",description:"challenger_address defines the address of the validator's authorized challenger;."},bls_key:{type:"string",format:"byte",title:"bls_key defines the bls pubkey of the validator's authorized relayer/challenger/operator;"}},description:"Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."}},title:"QueryValidatorResponse is response type for the Query/Validator RPC method"}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'}}}}}}}},parameters:[{name:"validator_addr",description:"validator_addr defines the validator address to query for.",in:"path",required:!0,schema:{type:"string"}}],tags:["staking"],description:"Validator queries validator info for given validator address.",method:"get",path:"/cosmos/staking/v1beta1/validators/{validator_addr}",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"Validator",description:{content:"Validator queries validator info for given validator address.",type:"text/plain"},url:{path:["cosmos","staking","v1beta1","validators",":validator_addr"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) validator_addr defines the validator address to query for.",type:"text/plain"},type:"any",value:"",key:"validator_addr"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},h=void 0,y={unversionedId:"greenfield-api/validator",id:"greenfield-api/validator",title:"Validator",description:"Validator queries validator info for given validator address.",source:"@site/docs/greenfield-api/validator.api.mdx",sourceDirName:"greenfield-api",slug:"/greenfield-api/validator",permalink:"/greenfield-docs/docs/greenfield-api/validator",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"validator",title:"Validator",description:"Validator queries validator info for given validator address.",sidebar_label:"Validator",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"Validator",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{validator:{type:"object",properties:{operator_address:{type:"string",description:"operator_address defines the address of the validator's operator; bech encoded in JSON."},consensus_pubkey:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'},jailed:{type:"boolean",description:"jailed defined whether the validator has been jailed from bonded status or not."},status:{description:"status is the validator status (bonded/unbonding/unbonded).",type:"string",enum:["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],default:"BOND_STATUS_UNSPECIFIED"},tokens:{type:"string",description:"tokens define the delegated tokens (incl. self-delegation)."},delegator_shares:{type:"string",description:"delegator_shares defines total shares issued to a validator's delegators."},description:{description:"description defines the description terms for the validator.",type:"object",properties:{moniker:{type:"string",description:"moniker defines a human-readable name for the validator."},identity:{type:"string",description:"identity defines an optional identity signature (ex. UPort or Keybase)."},website:{type:"string",description:"website defines an optional website link."},security_contact:{type:"string",description:"security_contact defines an optional email for security contact."},details:{type:"string",description:"details define other optional details."}}},unbonding_height:{type:"string",format:"int64",description:"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},unbonding_time:{type:"string",format:"date-time",description:"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},commission:{description:"commission defines the commission parameters.",type:"object",properties:{commission_rates:{description:"commission_rates defines the initial commission rates to be used for creating a validator.",type:"object",properties:{rate:{type:"string",description:"rate is the commission rate charged to delegators, as a fraction."},max_rate:{type:"string",description:"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},max_change_rate:{type:"string",description:"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."}}},update_time:{type:"string",format:"date-time",description:"update_time is the last time the commission rate was changed."}}},min_self_delegation:{type:"string",description:"min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"},unbonding_on_hold_ref_count:{type:"string",format:"int64",title:"strictly positive if this validator's unbonding has been stopped by external modules"},unbonding_ids:{type:"array",items:{type:"string",format:"uint64"},title:"list of unbonding ids, each uniquely identifing an unbonding of this validator"},self_del_address:{type:"string",description:"self_del_address defines the address of the validator for self delegation."},relayer_address:{type:"string",description:"relayer_address defines the address of the validator's authorized relayer;."},challenger_address:{type:"string",description:"challenger_address defines the address of the validator's authorized challenger;."},bls_key:{type:"string",format:"byte",title:"bls_key defines the bls pubkey of the validator's authorized relayer/challenger/operator;"}},description:"Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate."}},title:"QueryValidatorResponse is response type for the Query/Validator RPC method"}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'}}}}}}}},parameters:[{name:"validator_addr",description:"validator_addr defines the validator address to query for.",in:"path",required:!0,schema:{type:"string"}}],tags:["staking"],description:"Validator queries validator info for given validator address.",method:"get",path:"/cosmos/staking/v1beta1/validators/{validator_addr}",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"Validator",description:{content:"Validator queries validator info for given validator address.",type:"text/plain"},url:{path:["cosmos","staking","v1beta1","validators",":validator_addr"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) validator_addr defines the validator address to query for.",type:"text/plain"},type:"any",value:"",key:"validator_addr"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},sidebar:"apiReferenceSidebar",previous:{title:"Validators",permalink:"/greenfield-docs/docs/greenfield-api/validators"},next:{title:"ValidatorDelegations",permalink:"/greenfield-docs/docs/greenfield-api/validator-delegations"}},f={},u=[{value:"Validator",id:"validator",level:2}],g={toc:u},b="wrapper";function v(e){let{components:t,...n}=e;return(0,i.kt)(b,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"validator"},"Validator"),(0,i.kt)("p",null,"Validator queries validator info for given validator address."),(0,i.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"Path Parameters")),(0,i.kt)("div",null,(0,i.kt)("ul",null,(0,i.kt)(r.Z,{className:"paramsItem",param:{name:"validator_addr",description:"validator_addr defines the validator address to query for.",in:"path",required:!0,schema:{type:"string"}},mdxType:"ParamsItem"})))),(0,i.kt)("div",null,(0,i.kt)(o.Z,{mdxType:"ApiTabs"},(0,i.kt)(m.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"A successful response.")),(0,i.kt)("div",null,(0,i.kt)(s.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(m.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,i.kt)(p.Z,{mdxType:"SchemaTabs"},(0,i.kt)(m.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"validator"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Validator defines a validator, together with the total amount of the\nValidator's bond shares and their exchange rate to coins. Slashing results in\na decrease in the exchange rate, allowing correct calculation of future\nundelegations without iterating over delegators. When coins are delegated to\nthis validator, the validator is credited with a delegation whose number of\nbond shares is based on the amount of coins delegated divided by the current\nexchange rate. Voting power can be calculated as total bonded shares\nmultiplied by exchange rate.")),(0,i.kt)(d.Z,{collapsible:!1,name:"operator_address",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"operator_address defines the address of the validator's operator; bech encoded in JSON."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"consensus_pubkey"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Any")," contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message."),(0,i.kt)("p",null,"Protobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type."),(0,i.kt)("p",null,"Example 1: Pack and unpack a message in C++."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Foo foo = ...;\nAny any;\nany.PackFrom(foo);\n...\nif (any.UnpackTo(&foo)) {\n  ...\n}\n")),(0,i.kt)("p",null,"Example 2: Pack and unpack a message in Java."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Foo foo = ...;\nAny any = Any.pack(foo);\n...\nif (any.is(Foo.class)) {\n  foo = any.unpack(Foo.class);\n}\n// or ...\nif (any.isSameTypeAs(Foo.getDefaultInstance())) {\n  foo = any.unpack(Foo.getDefaultInstance());\n}\n")),(0,i.kt)("p",null," Example 3: Pack and unpack a message in Python."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"foo = Foo(...)\nany = Any()\nany.Pack(foo)\n...\nif any.Is(Foo.DESCRIPTOR):\n  any.Unpack(foo)\n  ...\n")),(0,i.kt)("p",null," Example 4: Pack and unpack a message in Go"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," foo := &pb.Foo{...}\n any, err := anypb.New(foo)\n if err != nil {\n   ...\n }\n ...\n foo := &pb.Foo{}\n if err := any.UnmarshalTo(foo); err != nil {\n   ...\n }\n")),(0,i.kt)("p",null,"The pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\"."),(0,i.kt)("h1",{id:"json"},"JSON"),(0,i.kt)("p",null,"The JSON representation of an ",(0,i.kt)("inlineCode",{parentName:"p"},"Any")," value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field ",(0,i.kt)("inlineCode",{parentName:"p"},"@type")," which contains the type URL. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package google.profile;\nmessage Person {\n  string first_name = 1;\n  string last_name = 2;\n}\n\n{\n  "@type": "type.googleapis.com/google.profile.Person",\n  "firstName": <string\\>,\n  "lastName": <string\\>\n}\n')),(0,i.kt)("p",null,"If the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n",(0,i.kt)("inlineCode",{parentName:"p"},"value")," which holds the custom JSON in addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@type"),"\nfield. Example (for message ","[google.protobuf.Duration][]","):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "@type": "type.googleapis.com/google.protobuf.Duration",\n  "value": "1.212s"\n}\n'))),(0,i.kt)(d.Z,{collapsible:!1,name:"type_url",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"value",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."},mdxType:"SchemaItem"})))),(0,i.kt)(d.Z,{collapsible:!1,name:"jailed",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{type:"boolean",description:"jailed defined whether the validator has been jailed from bonded status or not."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`BOND_STATUS_UNSPECIFIED`, `BOND_STATUS_UNBONDED`, `BOND_STATUS_UNBONDING`, `BOND_STATUS_BONDED`]",schema:{description:"status is the validator status (bonded/unbonding/unbonded).",type:"string",enum:["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"],default:"BOND_STATUS_UNSPECIFIED"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"tokens",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"tokens define the delegated tokens (incl. self-delegation)."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"delegator_shares",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"delegator_shares defines total shares issued to a validator's delegators."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"description"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"description defines the description terms for the validator.")),(0,i.kt)(d.Z,{collapsible:!1,name:"moniker",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"moniker defines a human-readable name for the validator."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"identity",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"identity defines an optional identity signature (ex. UPort or Keybase)."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"website",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"website defines an optional website link."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"security_contact",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"security_contact defines an optional email for security contact."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"details",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"details define other optional details."},mdxType:"SchemaItem"})))),(0,i.kt)(d.Z,{collapsible:!1,name:"unbonding_height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64",description:"unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"unbonding_time",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time",description:"unbonding_time defines, if unbonding, the min time for the validator to complete unbonding."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"commission"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"commission defines the commission parameters.")),(0,i.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"commission_rates"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"commission_rates defines the initial commission rates to be used for creating a validator.")),(0,i.kt)(d.Z,{collapsible:!1,name:"rate",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"rate is the commission rate charged to delegators, as a fraction."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"max_rate",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"max_rate defines the maximum commission rate which validator can ever charge, as a fraction."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"max_change_rate",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"max_change_rate defines the maximum daily increase of the validator commission, as a fraction."},mdxType:"SchemaItem"})))),(0,i.kt)(d.Z,{collapsible:!1,name:"update_time",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time",description:"update_time is the last time the commission rate was changed."},mdxType:"SchemaItem"})))),(0,i.kt)(d.Z,{collapsible:!1,name:"min_self_delegation",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"min_self_delegation is the validator's self declared minimum self delegation.\n\nSince: cosmos-sdk 0.46"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"unbonding_on_hold_ref_count",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64",title:"strictly positive if this validator's unbonding has been stopped by external modules"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"unbonding_ids",required:!1,schemaName:"uint64[]",qualifierMessage:void 0,schema:{type:"array",items:{type:"string",format:"uint64"},title:"list of unbonding ids, each uniquely identifing an unbonding of this validator"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"self_del_address",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"self_del_address defines the address of the validator for self delegation."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"relayer_address",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"relayer_address defines the address of the validator's authorized relayer;."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"challenger_address",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"challenger_address defines the address of the validator's authorized challenger;."},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"bls_key",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"bls_key defines the bls pubkey of the validator's authorized relayer/challenger/operator;"},mdxType:"SchemaItem"}))))))),(0,i.kt)(m.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(l.Z,{responseExample:'{\n  "validator": {\n    "operator_address": "string",\n    "consensus_pubkey": {\n      "type_url": "string",\n      "value": "string"\n    },\n    "jailed": true,\n    "status": "BOND_STATUS_UNSPECIFIED",\n    "tokens": "string",\n    "delegator_shares": "string",\n    "description": {\n      "moniker": "string",\n      "identity": "string",\n      "website": "string",\n      "security_contact": "string",\n      "details": "string"\n    },\n    "unbonding_height": "string",\n    "unbonding_time": "2023-12-18T20:49:10.254Z",\n    "commission": {\n      "commission_rates": {\n        "rate": "string",\n        "max_rate": "string",\n        "max_change_rate": "string"\n      },\n      "update_time": "2023-12-18T20:49:10.254Z"\n    },\n    "min_self_delegation": "string",\n    "unbonding_on_hold_ref_count": "string",\n    "unbonding_ids": [\n      "string"\n    ],\n    "self_del_address": "string",\n    "relayer_address": "string",\n    "challenger_address": "string",\n    "bls_key": "string"\n  }\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,i.kt)(m.Z,{label:"default",value:"default",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"An unexpected error response.")),(0,i.kt)("div",null,(0,i.kt)(s.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(m.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,i.kt)(p.Z,{mdxType:"SchemaTabs"},(0,i.kt)(m.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(d.Z,{collapsible:!1,name:"error",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"code",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"message",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"details"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(d.Z,{collapsible:!1,name:"type_url",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},mdxType:"SchemaItem"}),(0,i.kt)(d.Z,{collapsible:!1,name:"value",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,i.kt)(m.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(l.Z,{responseExample:'{\n  "error": "string",\n  "code": 0,\n  "message": "string",\n  "details": [\n    {\n      "type_url": "string",\n      "value": "string"\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}v.isMDXComponent=!0}}]);