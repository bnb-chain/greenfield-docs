"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[697],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(a),f=n,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||o;return a?r.createElement(m,i(i({ref:t},d),{},{components:a})):r.createElement(m,i({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},5213:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const o={title:"Billing and Payment",order:4},i="Billing and Payment",l={unversionedId:"guide/core-concept/billing-payment",id:"guide/core-concept/billing-payment",title:"Billing and Payment",description:"In Greenfield, users are required to pay two different types of fees:",source:"@site/docs/guide/core-concept/billing-payment.md",sourceDirName:"guide/core-concept",slug:"/guide/core-concept/billing-payment",permalink:"/greenfield-docs/docs/guide/core-concept/billing-payment",draft:!1,editUrl:"https://github.com/bnb-chain/greenfield-docs/blob/main/docs/guide/core-concept/billing-payment.md",tags:[],version:"current",frontMatter:{title:"Billing and Payment",order:4},sidebar:"guideSidebar",previous:{title:"Key Management",permalink:"/greenfield-docs/docs/guide/core-concept/key-management"},next:{title:"Cross-Chain Programmability",permalink:"/greenfield-docs/docs/guide/core-concept/programmability"}},s={},c=[{value:"Storage Service Fee",id:"storage-service-fee",level:2},{value:"Global Virtual Group Family &amp; Global Virtual Group",id:"global-virtual-group-family--global-virtual-group",level:3},{value:"Payment Account",id:"payment-account",level:3},{value:"Paymaster",id:"paymaster",level:3},{value:"Downgraded service",id:"downgraded-service",level:3},{value:"Trust or Shift",id:"trust-or-shift",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"billing-and-payment"},"Billing and Payment"),(0,n.kt)("p",null,"In Greenfield, users are required to pay two different types of fees:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Firstly, every transaction will require gas fees to pay the Greenfield validator to\nwrite the metadata on-chain as described in ",(0,n.kt)("a",{parentName:"li",href:"/greenfield-docs/docs/guide/core-concept/gas-fees"},"Gas and Fee")," part."),(0,n.kt)("li",{parentName:"ul"},"Secondly, the Storage Providers (SPs) charge the users for their storage service. Such payment also happens on the\nGreenfield.")),(0,n.kt)("p",null,"The storage service fee will be charged on Greenfield in a steam payment style\nlike ",(0,n.kt)("a",{parentName:"p",href:"https://docs.superfluid.finance/superfluid/protocol-overview/in-depth-overview/super-agreements/constant-flow-agreement-cfa"},"Superfluid"),"."),(0,n.kt)("h2",{id:"storage-service-fee"},"Storage Service Fee"),(0,n.kt)("p",null,"There are two kinds of storage service fees in Greenfield: ",(0,n.kt)("strong",{parentName:"p"},"object storage fee")," and ",(0,n.kt)("strong",{parentName:"p"},"data package fee"),"."),(0,n.kt)("p",null,"For storage, every object stored on Greenfield is charged at the price calculated by size, replica numbers,\na base price ratio, and other parameters. Once the object is stored, the total charge of\nstorage will be mainly only related to time and the base price."),(0,n.kt)("p",null,"The storage fee calculation is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-math"},"Storage Fee = sum(ChargedSize) * (PrimaryStorePrice + SecondaryStorePrice*SecondarySPNumber) * (1+Validator Tax Rate) * ReserveTime\n")),(0,n.kt)("p",null,"Users are granted a free, time-based quota for downloading data, with each bucket corresponding to a set of their objects. If the quota is exceeded, users can upgrade their data package to obtain an additional quota. The price for each data package is fixed for a certain period (unless the read price has been changed and the user takes some actions to reflect the price change), during which users will only be charged based on the amount of time they spend downloading and the package price. This charging scheme remains in effect until the user modifies their data package settings."),(0,n.kt)("p",null,"The download quota fee calculation is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-math"},"Download Quota Fee Fee = ChargedReadQuota * ReadPrice * (1 + Validator Tax Rate) * ReserveTime\n")),(0,n.kt)("h3",{id:"global-virtual-group-family--global-virtual-group"},"Global Virtual Group Family & Global Virtual Group"),(0,n.kt)("p",null,"For storage fees, it will be not streamed to storage providers directly. It will be streamed to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Global Virtual Group Family's virtual funding address for ",(0,n.kt)("strong",{parentName:"li"},"data package fee")," and primary sp's ",(0,n.kt)("strong",{parentName:"li"},"object storage fee")),(0,n.kt)("li",{parentName:"ul"},"Global Virtual Group's virtual funding address for all secondary sp's ",(0,n.kt)("strong",{parentName:"li"},"object storage fee")),(0,n.kt)("li",{parentName:"ul"},"Validator tax pool for extra tax fee (e.g. 1%), which will be used for rewarding data availability challenge submitters.")),(0,n.kt)("p",null,"When storage providers want to get their income, they can withdraw from Global Virtual Group Family and Global Virtual Group\nthey are in.\nThe validator tax pool cannot be controlled via any private key, and is used for challenge reward."),(0,n.kt)("h3",{id:"payment-account"},"Payment Account"),(0,n.kt)("p",null,'By default, the object owner\'s address will be used to pay for the objects it owns.\nBut users can also create multiple "payment accounts" and associate objects to different payment\naccounts to pay for storage and bandwidth.'),(0,n.kt)("p",null,'The address format of the payment account is the same as normal accounts.\nIt\'s derived by the hash of the user address and payment account index.\nHowever, the payment accounts are only logical ones and only exist in the storage payment module.\nUsers can deposit into, withdraw from, and query the balance of payment accounts on the Greenfield blockchain,\nbut users cannot use payment accounts to perform staking or other on-chain transactions.\nPayment accounts can be set as "non-refundable". Users cannot withdraw funds from such payment accounts.'),(0,n.kt)("h3",{id:"paymaster"},"Paymaster"),(0,n.kt)("p",null,"Besides using the owner's address or payment accounts to pay for the storage and bandwidth, users can also use others'\naddress or payment account by setting the payment account for the bucket. The owner of payment account need to set\nthe flow rate limit for the bucket before the bucket can be used."),(0,n.kt)("p",null,"This will lower the barrier for users to use Greenfield since they don't need to have BNB to pay for the storage and bandwidth\nand they don't need to understand the charging mechanism of Greenfield which is quite complex."),(0,n.kt)("p",null,"It will also provide a possibility for projects to sponsor the storage and bandwidth for their users."),(0,n.kt)("p",null,"For more details, you can refer to the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/bnb-chain/BEPs/pull/362"},"BEP of the paymaster"),"."),(0,n.kt)("h3",{id:"downgraded-service"},"Downgraded service"),(0,n.kt)("p",null,"Once the payment accounts run out of BNB, the objects associated with these payment accounts will\nsuffer from a downgraded service of downloading, i.e. the download speed and connection numbers will be limited.\nOnce the fund is transferred to the payment accounts, the service quality can be resumed right away.\nIf the service is not resumed for a long time, it is the SPs' discretionary decision to clear the data out,\nin a similar way to how SPs claim to stop services to certain objects. In such a case, the data may be gone\nfrom Greenfield completely."),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"If users fail to renew their subscription on time, ",(0,n.kt)("strong",{parentName:"p"},"there is a risk of their stored data being permanently\ndeleted."))),(0,n.kt)("h3",{id:"trust-or-shift"},"Trust or Shift"),(0,n.kt)("p",null,"In Greenfield, there is trust between the users and the SPs for data download."),(0,n.kt)("p",null,"Since downloading bandwidth incurs additional fees and the download journal is not completely stored on the Greenfield\nblockchain, SPs offer an endpoint interface for users to access detailed logs and downloaders'\nsignatures for download billing.\nIf the users and the SPs cannot agree on the bill, users may just select another Primary SP."),(0,n.kt)("p",null,"For more tech details, please refer to\nthe ",(0,n.kt)("a",{parentName:"p",href:"/greenfield-docs/docs/guide/greenfield-blockchain/modules/billing-and-payment"},"stream payment module design"),"."))}p.isMDXComponent=!0}}]);