"use strict";(self.webpackChunkgreenfield_docs=self.webpackChunkgreenfield_docs||[]).push([[3514],{1438:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>_,frontMatter:()=>y,metadata:()=>h,toc:()=>f});var s=a(87462),i=(a(67294),a(3905)),r=a(26389),n=a(94891),o=a(75190),m=a(47507),l=a(24310),p=a(63303),c=(a(75035),a(85162));const y={id:"get-block-by-height",title:"GetBlockByHeight",description:"GetBlockByHeight queries block for given height.",sidebar_label:"GetBlockByHeight",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"GetBlockByHeight",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},block:{title:"Deprecated: please use `sdk_block` instead",type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a block header."},data:{type:"object",properties:{txs:{type:"array",items:{type:"string",format:"byte"},description:"Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs."}},title:"Data contains the set of transactions included in the block"},evidence:{type:"object",properties:{evidence:{type:"array",items:{type:"object",properties:{duplicate_vote_evidence:{type:"object",properties:{vote_a:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},vote_b:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},total_voting_power:{type:"string",format:"int64"},validator_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},light_client_attack_evidence:{type:"object",properties:{conflicting_block:{type:"object",properties:{signed_header:{type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a block header."},commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}}},validator_set:{type:"object",properties:{validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},proposer:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}},total_voting_power:{type:"string",format:"int64"}}}}},common_height:{type:"string",format:"int64"},byzantine_validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},total_voting_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}}}}}},last_commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}}},sdk_block:{title:"Since: cosmos-sdk 0.47",type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",description:"proposer_address is the original block proposer address, formatted as a hex string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a hex string\nfor better UX."}},description:"Header defines the structure of a Tendermint block header."},data:{type:"object",properties:{txs:{type:"array",items:{type:"string",format:"byte"},description:"Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs."}},title:"Data contains the set of transactions included in the block"},evidence:{type:"object",properties:{evidence:{type:"array",items:{type:"object",properties:{duplicate_vote_evidence:{type:"object",properties:{vote_a:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},vote_b:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},total_voting_power:{type:"string",format:"int64"},validator_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},light_client_attack_evidence:{type:"object",properties:{conflicting_block:{type:"object",properties:{signed_header:{type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a block header."},commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}}},validator_set:{type:"object",properties:{validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},proposer:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}},total_voting_power:{type:"string",format:"int64"}}}}},common_height:{type:"string",format:"int64"},byzantine_validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},total_voting_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}}}}}},last_commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}},description:"Block is tendermint type Block, with the Header proposer address\nfield converted to hex string."}},description:"GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'}}}}}}}},parameters:[{name:"height",in:"path",required:!0,schema:{type:"string",format:"int64"}}],tags:["base"],description:"GetBlockByHeight queries block for given height.",method:"get",path:"/cosmos/base/tendermint/v1beta1/blocks/{height}",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"GetBlockByHeight",description:{content:"GetBlockByHeight queries block for given height.",type:"text/plain"},url:{path:["cosmos","base","tendermint","v1beta1","blocks",":height"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) ",type:"text/plain"},type:"any",value:"",key:"height"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},d=void 0,h={unversionedId:"greenfield-api/get-block-by-height",id:"greenfield-api/get-block-by-height",title:"GetBlockByHeight",description:"GetBlockByHeight queries block for given height.",source:"@site/docs/greenfield-api/get-block-by-height.api.mdx",sourceDirName:"greenfield-api",slug:"/greenfield-api/get-block-by-height",permalink:"/greenfield-docs/docs/greenfield-api/get-block-by-height",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"get-block-by-height",title:"GetBlockByHeight",description:"GetBlockByHeight queries block for given height.",sidebar_label:"GetBlockByHeight",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"GetBlockByHeight",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},block:{title:"Deprecated: please use `sdk_block` instead",type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a block header."},data:{type:"object",properties:{txs:{type:"array",items:{type:"string",format:"byte"},description:"Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs."}},title:"Data contains the set of transactions included in the block"},evidence:{type:"object",properties:{evidence:{type:"array",items:{type:"object",properties:{duplicate_vote_evidence:{type:"object",properties:{vote_a:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},vote_b:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},total_voting_power:{type:"string",format:"int64"},validator_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},light_client_attack_evidence:{type:"object",properties:{conflicting_block:{type:"object",properties:{signed_header:{type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a block header."},commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}}},validator_set:{type:"object",properties:{validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},proposer:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}},total_voting_power:{type:"string",format:"int64"}}}}},common_height:{type:"string",format:"int64"},byzantine_validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},total_voting_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}}}}}},last_commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}}},sdk_block:{title:"Since: cosmos-sdk 0.47",type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",description:"proposer_address is the original block proposer address, formatted as a hex string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a hex string\nfor better UX."}},description:"Header defines the structure of a Tendermint block header."},data:{type:"object",properties:{txs:{type:"array",items:{type:"string",format:"byte"},description:"Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs."}},title:"Data contains the set of transactions included in the block"},evidence:{type:"object",properties:{evidence:{type:"array",items:{type:"object",properties:{duplicate_vote_evidence:{type:"object",properties:{vote_a:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},vote_b:{type:"object",properties:{type:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},timestamp:{type:"string",format:"date-time"},validator_address:{type:"string",format:"byte"},validator_index:{type:"integer",format:"int32"},signature:{type:"string",format:"byte"}},description:"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus."},total_voting_power:{type:"string",format:"int64"},validator_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."},light_client_attack_evidence:{type:"object",properties:{conflicting_block:{type:"object",properties:{signed_header:{type:"object",properties:{header:{type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a block header."},commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}}},validator_set:{type:"object",properties:{validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},proposer:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}},total_voting_power:{type:"string",format:"int64"}}}}},common_height:{type:"string",format:"int64"},byzantine_validators:{type:"array",items:{type:"object",properties:{address:{type:"string",format:"byte"},pub_key:{type:"object",properties:{ed25519:{type:"string",format:"byte"},secp256k1:{type:"string",format:"byte"}},title:"PublicKey defines the keys available for use with Validators"},voting_power:{type:"string",format:"int64"},proposer_priority:{type:"string",format:"int64"}}}},total_voting_power:{type:"string",format:"int64"},timestamp:{type:"string",format:"date-time"}},description:"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."}}}}}},last_commit:{type:"object",properties:{height:{type:"string",format:"int64"},round:{type:"integer",format:"int32"},block_id:{type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}},title:"BlockID"},signatures:{type:"array",items:{type:"object",properties:{block_id_flag:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},validator_address:{type:"string",format:"byte"},timestamp:{type:"string",format:"date-time"},signature:{type:"string",format:"byte"}},description:"CommitSig is a part of the Vote included in a Commit."}}},description:"Commit contains the evidence that a block was committed by a set of validators."}},description:"Block is tendermint type Block, with the Header proposer address\nfield converted to hex string."}},description:"GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'}}}}}}}},parameters:[{name:"height",in:"path",required:!0,schema:{type:"string",format:"int64"}}],tags:["base"],description:"GetBlockByHeight queries block for given height.",method:"get",path:"/cosmos/base/tendermint/v1beta1/blocks/{height}",servers:[{url:"https://greenfield-chain.bnbchain.org",description:"Mainnet RPC (uses live data)"},{url:"https://gnfd-testnet-fullnode-tendermint-us.bnbchain.org",description:"Testnet RPC (uses test data)"}],info:{title:"Greenfield - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"GetBlockByHeight",description:{content:"GetBlockByHeight queries block for given height.",type:"text/plain"},url:{path:["cosmos","base","tendermint","v1beta1","blocks",":height"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) ",type:"text/plain"},type:"any",value:"",key:"height"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"docs/greenfield-api/greenfield-grpc-gateway-docs",custom_edit_url:null},sidebar:"apiReferenceSidebar",previous:{title:"GetLatestBlock",permalink:"/greenfield-docs/docs/greenfield-api/get-latest-block"},next:{title:"GetNodeInfo",permalink:"/greenfield-docs/docs/greenfield-api/get-node-info"}},g={},f=[{value:"GetBlockByHeight",id:"getblockbyheight",level:2}],b={toc:f},u="wrapper";function _(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,s.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"getblockbyheight"},"GetBlockByHeight"),(0,i.kt)("p",null,"GetBlockByHeight queries block for given height."),(0,i.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"Path Parameters")),(0,i.kt)("div",null,(0,i.kt)("ul",null,(0,i.kt)(o.Z,{className:"paramsItem",param:{name:"height",in:"path",required:!0,schema:{type:"string",format:"int64"}},mdxType:"ParamsItem"})))),(0,i.kt)("div",null,(0,i.kt)(r.Z,{mdxType:"ApiTabs"},(0,i.kt)(c.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"A successful response.")),(0,i.kt)("div",null,(0,i.kt)(n.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,i.kt)(p.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Header defines the structure of a block header.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"version"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,i.kt)(l.Z,{collapsible:!1,name:"block",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"chain_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"time",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"last_block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"last_commit_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes of block data"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"data_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"next_validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"consensus_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"last_results_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"evidence_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"consensus info"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"data"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"txs",required:!1,schemaName:"byte[]",qualifierMessage:void 0,schema:{type:"array",items:{type:"string",format:"byte"},description:"Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs."},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"duplicate_vote_evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"vote_a"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus.")),(0,i.kt)(l.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`SIGNED_MSG_TYPE_UNKNOWN`, `SIGNED_MSG_TYPE_PREVOTE`, `SIGNED_MSG_TYPE_PRECOMMIT`, `SIGNED_MSG_TYPE_PROPOSAL`]",schema:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_index",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"vote_b"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus.")),(0,i.kt)(l.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`SIGNED_MSG_TYPE_UNKNOWN`, `SIGNED_MSG_TYPE_PREVOTE`, `SIGNED_MSG_TYPE_PRECOMMIT`, `SIGNED_MSG_TYPE_PROPOSAL`]",schema:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_index",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"total_voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"light_client_attack_evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"conflicting_block"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"signed_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Header defines the structure of a block header.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"version"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,i.kt)(l.Z,{collapsible:!1,name:"block",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"chain_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"time",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"last_block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"last_commit_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes of block data"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"data_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"next_validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"consensus_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"last_results_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"evidence_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"consensus info"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"commit"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Commit contains the evidence that a block was committed by a set of validators.")),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"signatures"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"block_id_flag",required:!1,schemaName:"BlockIdFlag indicates which BlcokID the signature is for",qualifierMessage:"**Possible values:** [`BLOCK_ID_FLAG_UNKNOWN`, `BLOCK_ID_FLAG_ABSENT`, `BLOCK_ID_FLAG_COMMIT`, `BLOCK_ID_FLAG_NIL`]",schema:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"validator_set"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"validators"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"pub_key"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"ed25519",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"secp256k1",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_priority",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"proposer"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"pub_key"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"ed25519",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"secp256k1",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_priority",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"total_voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"common_height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"byzantine_validators"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"pub_key"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"ed25519",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"secp256k1",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_priority",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,i.kt)(l.Z,{collapsible:!1,name:"total_voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"})))),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"last_commit"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Commit contains the evidence that a block was committed by a set of validators.")),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"signatures"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"block_id_flag",required:!1,schemaName:"BlockIdFlag indicates which BlcokID the signature is for",qualifierMessage:"**Possible values:** [`BLOCK_ID_FLAG_UNKNOWN`, `BLOCK_ID_FLAG_ABSENT`, `BLOCK_ID_FLAG_COMMIT`, `BLOCK_ID_FLAG_NIL`]",schema:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"sdk_block"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Block is tendermint type Block, with the Header proposer address\nfield converted to hex string.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Header defines the structure of a Tendermint block header.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"version"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,i.kt)(l.Z,{collapsible:!1,name:"block",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"chain_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"time",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"last_block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"last_commit_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes of block data"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"data_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"next_validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"consensus_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"last_results_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"evidence_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"consensus info"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_address",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"proposer_address is the original block proposer address, formatted as a hex string.\nIn Tendermint, this type is `bytes`, but in the SDK, we convert it to a hex string\nfor better UX."},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"data"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"txs",required:!1,schemaName:"byte[]",qualifierMessage:void 0,schema:{type:"array",items:{type:"string",format:"byte"},description:"Txs that will be applied by state @ block.Height+1.\nNOTE: not all txs here are valid.  We're just agreeing on the order first.\nThis means that block.AppHash does not include these txs."},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"duplicate_vote_evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"vote_a"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus.")),(0,i.kt)(l.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`SIGNED_MSG_TYPE_UNKNOWN`, `SIGNED_MSG_TYPE_PREVOTE`, `SIGNED_MSG_TYPE_PRECOMMIT`, `SIGNED_MSG_TYPE_PROPOSAL`]",schema:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_index",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"vote_b"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Vote represents a prevote, precommit, or commit vote from validators for\nconsensus.")),(0,i.kt)(l.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:"**Possible values:** [`SIGNED_MSG_TYPE_UNKNOWN`, `SIGNED_MSG_TYPE_PREVOTE`, `SIGNED_MSG_TYPE_PRECOMMIT`, `SIGNED_MSG_TYPE_PROPOSAL`]",schema:{type:"string",enum:["SIGNED_MSG_TYPE_UNKNOWN","SIGNED_MSG_TYPE_PREVOTE","SIGNED_MSG_TYPE_PRECOMMIT","SIGNED_MSG_TYPE_PROPOSAL"],default:"SIGNED_MSG_TYPE_UNKNOWN",description:"SignedMsgType is a type of signed message in the consensus.\n\n - SIGNED_MSG_TYPE_PREVOTE: Votes\n - SIGNED_MSG_TYPE_PROPOSAL: Proposals"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_index",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"total_voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"light_client_attack_evidence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"conflicting_block"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"signed_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Header defines the structure of a block header.")),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"version"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,i.kt)(l.Z,{collapsible:!1,name:"block",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app",required:!1,schemaName:"uint64",qualifierMessage:void 0,schema:{type:"string",format:"uint64"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"chain_id",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"time",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"last_block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"last_commit_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes of block data"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"data_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"next_validators_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"consensus_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"app_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"last_results_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"evidence_hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",title:"consensus info"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"commit"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Commit contains the evidence that a block was committed by a set of validators.")),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"signatures"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"block_id_flag",required:!1,schemaName:"BlockIdFlag indicates which BlcokID the signature is for",qualifierMessage:"**Possible values:** [`BLOCK_ID_FLAG_UNKNOWN`, `BLOCK_ID_FLAG_ABSENT`, `BLOCK_ID_FLAG_COMMIT`, `BLOCK_ID_FLAG_NIL`]",schema:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"validator_set"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"validators"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"pub_key"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"ed25519",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"secp256k1",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_priority",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"proposer"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"pub_key"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"ed25519",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"secp256k1",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_priority",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"total_voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!1,name:"common_height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"byzantine_validators"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"pub_key"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"ed25519",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"secp256k1",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"})))),(0,i.kt)(l.Z,{collapsible:!1,name:"voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"proposer_priority",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,i.kt)(l.Z,{collapsible:!1,name:"total_voting_power",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"})))),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"last_commit"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,i.kt)("p",null,"Commit contains the evidence that a block was committed by a set of validators.")),(0,i.kt)(l.Z,{collapsible:!1,name:"height",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"string",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"round",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"block_id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"part_set_header"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"total",required:!1,schemaName:"int64",qualifierMessage:void 0,schema:{type:"integer",format:"int64"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"hash",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}))))))),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"signatures"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"block_id_flag",required:!1,schemaName:"BlockIdFlag indicates which BlcokID the signature is for",qualifierMessage:"**Possible values:** [`BLOCK_ID_FLAG_UNKNOWN`, `BLOCK_ID_FLAG_ABSENT`, `BLOCK_ID_FLAG_COMMIT`, `BLOCK_ID_FLAG_NIL`]",schema:{type:"string",enum:["BLOCK_ID_FLAG_UNKNOWN","BLOCK_ID_FLAG_ABSENT","BLOCK_ID_FLAG_COMMIT","BLOCK_ID_FLAG_NIL"],default:"BLOCK_ID_FLAG_UNKNOWN",title:"BlockIdFlag indicates which BlcokID the signature is for"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"validator_address",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"timestamp",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"signature",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte"},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))))))))),(0,i.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(m.Z,{responseExample:'{\n  "block_id": {\n    "hash": "string",\n    "part_set_header": {\n      "total": 0,\n      "hash": "string"\n    }\n  },\n  "block": {\n    "header": {\n      "version": {\n        "block": "string",\n        "app": "string"\n      },\n      "chain_id": "string",\n      "height": "string",\n      "time": "2023-12-18T20:49:10.176Z",\n      "last_block_id": {\n        "hash": "string",\n        "part_set_header": {\n          "total": 0,\n          "hash": "string"\n        }\n      },\n      "last_commit_hash": "string",\n      "data_hash": "string",\n      "validators_hash": "string",\n      "next_validators_hash": "string",\n      "consensus_hash": "string",\n      "app_hash": "string",\n      "last_results_hash": "string",\n      "evidence_hash": "string",\n      "proposer_address": "string"\n    },\n    "data": {\n      "txs": [\n        "string"\n      ]\n    },\n    "evidence": {\n      "evidence": [\n        {\n          "duplicate_vote_evidence": {\n            "vote_a": {\n              "type": "SIGNED_MSG_TYPE_UNKNOWN",\n              "height": "string",\n              "round": 0,\n              "block_id": {\n                "hash": "string",\n                "part_set_header": {\n                  "total": 0,\n                  "hash": "string"\n                }\n              },\n              "timestamp": "2023-12-18T20:49:10.177Z",\n              "validator_address": "string",\n              "validator_index": 0,\n              "signature": "string"\n            },\n            "vote_b": {\n              "type": "SIGNED_MSG_TYPE_UNKNOWN",\n              "height": "string",\n              "round": 0,\n              "block_id": {\n                "hash": "string",\n                "part_set_header": {\n                  "total": 0,\n                  "hash": "string"\n                }\n              },\n              "timestamp": "2023-12-18T20:49:10.177Z",\n              "validator_address": "string",\n              "validator_index": 0,\n              "signature": "string"\n            },\n            "total_voting_power": "string",\n            "validator_power": "string",\n            "timestamp": "2023-12-18T20:49:10.177Z"\n          },\n          "light_client_attack_evidence": {\n            "conflicting_block": {\n              "signed_header": {\n                "header": {\n                  "version": {\n                    "block": "string",\n                    "app": "string"\n                  },\n                  "chain_id": "string",\n                  "height": "string",\n                  "time": "2023-12-18T20:49:10.177Z",\n                  "last_block_id": {\n                    "hash": "string",\n                    "part_set_header": {\n                      "total": 0,\n                      "hash": "string"\n                    }\n                  },\n                  "last_commit_hash": "string",\n                  "data_hash": "string",\n                  "validators_hash": "string",\n                  "next_validators_hash": "string",\n                  "consensus_hash": "string",\n                  "app_hash": "string",\n                  "last_results_hash": "string",\n                  "evidence_hash": "string",\n                  "proposer_address": "string"\n                },\n                "commit": {\n                  "height": "string",\n                  "round": 0,\n                  "block_id": {\n                    "hash": "string",\n                    "part_set_header": {\n                      "total": 0,\n                      "hash": "string"\n                    }\n                  },\n                  "signatures": [\n                    {\n                      "block_id_flag": "BLOCK_ID_FLAG_UNKNOWN",\n                      "validator_address": "string",\n                      "timestamp": "2023-12-18T20:49:10.177Z",\n                      "signature": "string"\n                    }\n                  ]\n                }\n              },\n              "validator_set": {\n                "validators": [\n                  {\n                    "address": "string",\n                    "pub_key": {\n                      "ed25519": "string",\n                      "secp256k1": "string"\n                    },\n                    "voting_power": "string",\n                    "proposer_priority": "string"\n                  }\n                ],\n                "proposer": {\n                  "address": "string",\n                  "pub_key": {\n                    "ed25519": "string",\n                    "secp256k1": "string"\n                  },\n                  "voting_power": "string",\n                  "proposer_priority": "string"\n                },\n                "total_voting_power": "string"\n              }\n            },\n            "common_height": "string",\n            "byzantine_validators": [\n              {\n                "address": "string",\n                "pub_key": {\n                  "ed25519": "string",\n                  "secp256k1": "string"\n                },\n                "voting_power": "string",\n                "proposer_priority": "string"\n              }\n            ],\n            "total_voting_power": "string",\n            "timestamp": "2023-12-18T20:49:10.177Z"\n          }\n        }\n      ]\n    },\n    "last_commit": {\n      "height": "string",\n      "round": 0,\n      "block_id": {\n        "hash": "string",\n        "part_set_header": {\n          "total": 0,\n          "hash": "string"\n        }\n      },\n      "signatures": [\n        {\n          "block_id_flag": "BLOCK_ID_FLAG_UNKNOWN",\n          "validator_address": "string",\n          "timestamp": "2023-12-18T20:49:10.177Z",\n          "signature": "string"\n        }\n      ]\n    }\n  },\n  "sdk_block": {\n    "header": {\n      "version": {\n        "block": "string",\n        "app": "string"\n      },\n      "chain_id": "string",\n      "height": "string",\n      "time": "2023-12-18T20:49:10.177Z",\n      "last_block_id": {\n        "hash": "string",\n        "part_set_header": {\n          "total": 0,\n          "hash": "string"\n        }\n      },\n      "last_commit_hash": "string",\n      "data_hash": "string",\n      "validators_hash": "string",\n      "next_validators_hash": "string",\n      "consensus_hash": "string",\n      "app_hash": "string",\n      "last_results_hash": "string",\n      "evidence_hash": "string",\n      "proposer_address": "string"\n    },\n    "data": {\n      "txs": [\n        "string"\n      ]\n    },\n    "evidence": {\n      "evidence": [\n        {\n          "duplicate_vote_evidence": {\n            "vote_a": {\n              "type": "SIGNED_MSG_TYPE_UNKNOWN",\n              "height": "string",\n              "round": 0,\n              "block_id": {\n                "hash": "string",\n                "part_set_header": {\n                  "total": 0,\n                  "hash": "string"\n                }\n              },\n              "timestamp": "2023-12-18T20:49:10.178Z",\n              "validator_address": "string",\n              "validator_index": 0,\n              "signature": "string"\n            },\n            "vote_b": {\n              "type": "SIGNED_MSG_TYPE_UNKNOWN",\n              "height": "string",\n              "round": 0,\n              "block_id": {\n                "hash": "string",\n                "part_set_header": {\n                  "total": 0,\n                  "hash": "string"\n                }\n              },\n              "timestamp": "2023-12-18T20:49:10.178Z",\n              "validator_address": "string",\n              "validator_index": 0,\n              "signature": "string"\n            },\n            "total_voting_power": "string",\n            "validator_power": "string",\n            "timestamp": "2023-12-18T20:49:10.178Z"\n          },\n          "light_client_attack_evidence": {\n            "conflicting_block": {\n              "signed_header": {\n                "header": {\n                  "version": {\n                    "block": "string",\n                    "app": "string"\n                  },\n                  "chain_id": "string",\n                  "height": "string",\n                  "time": "2023-12-18T20:49:10.178Z",\n                  "last_block_id": {\n                    "hash": "string",\n                    "part_set_header": {\n                      "total": 0,\n                      "hash": "string"\n                    }\n                  },\n                  "last_commit_hash": "string",\n                  "data_hash": "string",\n                  "validators_hash": "string",\n                  "next_validators_hash": "string",\n                  "consensus_hash": "string",\n                  "app_hash": "string",\n                  "last_results_hash": "string",\n                  "evidence_hash": "string",\n                  "proposer_address": "string"\n                },\n                "commit": {\n                  "height": "string",\n                  "round": 0,\n                  "block_id": {\n                    "hash": "string",\n                    "part_set_header": {\n                      "total": 0,\n                      "hash": "string"\n                    }\n                  },\n                  "signatures": [\n                    {\n                      "block_id_flag": "BLOCK_ID_FLAG_UNKNOWN",\n                      "validator_address": "string",\n                      "timestamp": "2023-12-18T20:49:10.178Z",\n                      "signature": "string"\n                    }\n                  ]\n                }\n              },\n              "validator_set": {\n                "validators": [\n                  {\n                    "address": "string",\n                    "pub_key": {\n                      "ed25519": "string",\n                      "secp256k1": "string"\n                    },\n                    "voting_power": "string",\n                    "proposer_priority": "string"\n                  }\n                ],\n                "proposer": {\n                  "address": "string",\n                  "pub_key": {\n                    "ed25519": "string",\n                    "secp256k1": "string"\n                  },\n                  "voting_power": "string",\n                  "proposer_priority": "string"\n                },\n                "total_voting_power": "string"\n              }\n            },\n            "common_height": "string",\n            "byzantine_validators": [\n              {\n                "address": "string",\n                "pub_key": {\n                  "ed25519": "string",\n                  "secp256k1": "string"\n                },\n                "voting_power": "string",\n                "proposer_priority": "string"\n              }\n            ],\n            "total_voting_power": "string",\n            "timestamp": "2023-12-18T20:49:10.178Z"\n          }\n        }\n      ]\n    },\n    "last_commit": {\n      "height": "string",\n      "round": 0,\n      "block_id": {\n        "hash": "string",\n        "part_set_header": {\n          "total": 0,\n          "hash": "string"\n        }\n      },\n      "signatures": [\n        {\n          "block_id_flag": "BLOCK_ID_FLAG_UNKNOWN",\n          "validator_address": "string",\n          "timestamp": "2023-12-18T20:49:10.178Z",\n          "signature": "string"\n        }\n      ]\n    }\n  }\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,i.kt)(c.Z,{label:"default",value:"default",mdxType:"TabItem"},(0,i.kt)("div",null,(0,i.kt)("p",null,"An unexpected error response.")),(0,i.kt)("div",null,(0,i.kt)(n.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,i.kt)(c.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,i.kt)(p.Z,{mdxType:"SchemaTabs"},(0,i.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,i.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,i.kt)("summary",{style:{textAlign:"left"}},(0,i.kt)("strong",null,"Schema")),(0,i.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,i.kt)("ul",{style:{marginLeft:"1rem"}},(0,i.kt)(l.Z,{collapsible:!1,name:"error",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"code",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"message",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,i.kt)("details",{style:{}},(0,i.kt)("summary",{style:{}},(0,i.kt)("strong",null,"details"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,i.kt)("div",{style:{marginLeft:"1rem"}},(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,i.kt)(l.Z,{collapsible:!1,name:"type_url",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},mdxType:"SchemaItem"}),(0,i.kt)(l.Z,{collapsible:!1,name:"value",required:!1,schemaName:"byte",qualifierMessage:void 0,schema:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."},mdxType:"SchemaItem"}),(0,i.kt)("li",null,(0,i.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]")))))))),(0,i.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,i.kt)(m.Z,{responseExample:'{\n  "error": "string",\n  "code": 0,\n  "message": "string",\n  "details": [\n    {\n      "type_url": "string",\n      "value": "string"\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}_.isMDXComponent=!0}}]);